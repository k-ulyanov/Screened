from pyscreeze import screenshot
from os import path, remove
from tkinter import Tk, BooleanVar, Button, Checkbutton, Label, PhotoImage
from tkinter.messagebox import askokcancel, showerror, showwarning, showinfo, WARNING
from tkinter.ttk import Combobox
from easygui import filesavebox
from pygetwindow import getAllWindows
from win32api import GetSystemMetrics
from datetime import datetime
from keyboard import add_hotkey, unhook_all_hotkeys

# Check if the window is hidden
def window_on():
	all_hwnd = f'{getAllWindows()}'.split(',')
	hwnd_list = []
	for i in all_hwnd:
		hwnd_list.append(int(i[i.rfind('=')+1:i.rfind(')')]))
	return window_hwnd in hwnd_list

# Function for taking the screenshot (called by the 'Screenshot' button)
def screenshot_function():
	# Hiding the window & waiting for it to really hide
	window_isvisible = window_on()
	window.withdraw()
	while window_on():
		pass
	# Taking the screenshot & waiting for it to really be taken
	screenshot_take = None
	screenshot_take = screenshot()
	while screenshot_take == None:
		pass
	# Determining the screenshot name
	name = str(datetime.now()).replace(':', '-').replace('.', '-')
	save(screenshot_take, name, choose_format.get()) # 3rd argument - getting the screenshot format
	# Restoring the window
	if window_isvisible:
		window.deiconify()

def save(screenshot_take, name, format):
	# Requesting the save path & saving
	explorer = filesavebox(default = f'Screenshot {name}.{format}')
	if explorer != None:
		screenshot_path = f'{explorer}.{format}'
		if path.exists(screenshot_path):
			if askokcancel(title='File already exists', message='Do you want to replace this file?', icon=WARNING):
				try:
					remove(screenshot_path)
				except:
					showerror(title='Error', message='Could not replace the file')
					return
		try:
			screenshot_take.save(f'{explorer}')
		except:
			showerror(title='Error', message='Could not save')

# Screenshot maintenance
def take_screenshot():
	global screenshot_taking
	if screenshot_taking is False:
		screenshot_taking = True
		unhook_all_hotkeys()
		screenshot_function()
		if hotkeys_on:
			add_hotkeys()
		screenshot_taking = False

# Adding hotkeys
def add_hotkeys():
	add_hotkey('ctrl+alt', take_screenshot)
	add_hotkey('win+alt', window.withdraw)
	add_hotkey('win+ctrl', window.deiconify)

# Hotkey toggle
def hotkeys_toggle():
	global hotkeys_on
	hotkeys_on = not hotkeys_on
	if hotkeys_on:
		add_hotkeys()
	else:
		unhook_all_hotkeys()

# Window creation & set window settings depending on the screen resolution
window = Tk()
window['bg'] = '#3f3f3f'
window.title('Screened')
if GetSystemMetrics(0) == 1680 and GetSystemMetrics(1) == 1050:
	window.geometry('310x110')
else:
	window.geometry('310x100')
window.resizable(width=False, height=False)
window.iconphoto(False, PhotoImage(data=''))

# Creating the 'Screenshot' button
screen = Button(window, text='Screenshot', height=2, width=10, command=take_screenshot)
screen.place(x=106, y=50)

# Creating the format selection 'Combobox'
choose_format = Combobox(window)
choose_format.place(x=75, y=5)
choose_format['values'] = ('png', 'jpg', 'jpeg', 'webp')
choose_format.current(0)

def f(f):
	showinfo(title='Info', message='Ctrl+Alt - take a screenshot\nWin+Alt - hide the window\nWin+Ctrl - show the window')
# Hotkeys label
hotkey_label = Label(text='?', font=('Courier', 13))
hotkey_label.place(x=295, y=75)
hotkey_label.bind('<Button-1>', f)

# Hotkeys checkbox
hotkeys_on = BooleanVar()
hotkey = Checkbutton(window, text='Hotkeys', variable=hotkeys_on, command=hotkeys_toggle)
hotkey.place(x=226, y=75)

# Get the window HWND
window_hwnd = int(window.frame(), 16)

# Allow screenshot taking
screenshot_taking = False

# Hotkeys corrections
add_hotkeys()
unhook_all_hotkeys()

# Run the window
window_visible = True
window.mainloop()

if window_visible is False:
	showwarning('Screened', 'Screeneed has been closed')